jest.autoMockOff();
require(path(pathMap.components, "button/button-group"));

describe("button component", function() {
  var rendered,
    clickHandler;

  PG.Components.Button = genMockComponent();

  beforeEach(function () {
    clickHandler = jest.genMockFunction();

    rendered = utils.renderIntoDocument(
      <PG.Components.ButtonGroup>
        <PG.Components.Button text="Left" clickHandler={clickHandler} />
        <PG.Components.Button text="Middle" clickHandler={clickHandler} />
        <PG.Components.Button text="Right" clickHandler={clickHandler} />
      </PG.Components.ButtonGroup>
    );
  });

  afterEach(function () {
    clickHandler.mockClear();
  });

  describe("default properties", function() {
    it("sets size prop to medium when no value was passed in", function() {
      expect(rendered.props.size).toBe("medium");
    });

    it("sets role prop to primary when no value was passed in", function() {
      expect(rendered.props.role).toBe("primary");
    });
  });

  describe("child components", function() {
    it("renders correct number of children", function(){
      var buttons = utils.scryRenderedComponentsWithType(rendered,PG.Components.Button);
      expect(buttons.length).toBe(3);
    });

    it("passes correct value for role prop", function() {
      rendered.setProps({ role: "secondary"});
      var buttons = utils.scryRenderedComponentsWithType(rendered,PG.Components.Button);

      buttons.forEach(function(button) {
        expect(button.props.role).toBe("secondary");
      });
    });

    it("passes correct value for size prop", function() {
      rendered.setProps({ size: "small"});
      var buttons = utils.scryRenderedComponentsWithType(rendered,PG.Components.Button);

      buttons.forEach(function(button) {
        expect(button.props.size).toBe("small");
      });
    });
  });
});