jest.autoMockOff();
require(path(pathMap.components, "tabs/tab-item"));

describe("tab item component", function() {
  var rendered,
    clickHandler;

  beforeEach(function () {
    clickHandler = jest.genMockFunction();
    rendered = utils.renderIntoDocument(
      <PG.Components.TabItem />
    );
  });

  afterEach(function () {
    clickHandler.mockClear();
  });

  function getComponentNode(tag) {
    var el = utils.findRenderedDOMComponentWithTag(rendered, tag);
    return el.getDOMNode();
  }

  it("renders text when text prop is passed in", function(){
    rendered.setProps({ text: "Home" });
    expect(getComponentNode("li").textContent).toBe("Home");
  });

  it("renders default value when no value is passed in", function() {
    expect(rendered.props.text).toBe("Tab Item");
  });

  it("renders a regular/not active item by default", function() {
    expect(getComponentNode("li").className).not.toContain("active")
  });

  it("renders an active item when active prop set to true", function() {
    rendered.setProps({ active: true });
    expect(getComponentNode("li").className).toContain("active")
  });

  it("renders a badge when badge prop is present", function() {
    rendered.setProps({ badge: "24" });
    expect(getComponentNode("span")).toBeDefined();
    expect(getComponentNode("span").textContent).toBe("24");
    expect(getComponentNode("span").className).toContain("badge");
  });

  it("executes callback on select", function(){
    rendered.setProps({ clickHandler: clickHandler });
    expect(clickHandler.mock.calls.length).toBe(0);
    utils.Simulate.click(getComponentNode("a"));
    expect(clickHandler.mock.calls.length).toBe(1);
  });

  it("passes an argument to the callback when props.index is provided", function() {
    rendered.setProps({ clickHandler: clickHandler, index: 1 });
    utils.Simulate.click(getComponentNode("a"));
    expect(clickHandler.mock.calls[0][0]).not.toBeUndefined();
  });

  it("does not pass an argument to the callback when props.index is not provided", function() {
    rendered.setProps({ clickHandler: clickHandler });
    utils.Simulate.click(getComponentNode("a"));
    expect(clickHandler.mock.calls[0][0]).toBeUndefined();
  });

});
