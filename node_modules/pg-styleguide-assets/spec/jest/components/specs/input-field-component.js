require(path(pathMap.components, "form/input-field"));
jest.autoMockOff();

describe("input field with message component", function() {
  var fieldErrorClass, callback, rendered, container;

  beforeEach(function() {
    fieldErrorClass = ".field-error-message";
    callback = jest.genMockFunction();
    rendered = utils.renderIntoDocument(
      <PG.Components.InputField
        type="text"
        value="Text"
        placeholder="Placeholder"
        focusHandler={callback}
        blurHandler={callback}
        changeHandler={callback}
      />
    );
    container = rendered.getDOMNode();
  });

  afterEach(function(){
    callback.mockClear();
  });

  it("renders correctly", function() {
    expect(container.tagName).toBe("INPUT");
    expect(container.value).toBe("Text");
    expect(container.type).toBe("text");
  });

  it("renders 'inline' class when inline prop is set", function(){
    rendered.setProps({ inline: true });
    expect(container.className.split(" ").indexOf("inline")).toBeGreaterThan(-1);
  });

  it("renders 'error' class when error prop is set", function() {
    rendered.setProps({ error: true });
    expect(container.className.split(" ").indexOf("error")).toBeGreaterThan(-1);
  });

  it("doesn't render 'error' class when focused", function() {
    rendered.setProps({ error: true });
    rendered.setState({ focused: true });
    expect(container.className.split(" ").indexOf("error")).toBe(-1);
  });

  it("renders 'success' class when success prop is set", function() {
    rendered.setProps({ success: true });
    expect(container.className.split(" ").indexOf("success")).toBeGreaterThan(-1);
  });

  it("renders disabled when disabled prop is set to true", function() {
    rendered.setProps({ disabled: true });
    expect(container.disabled).toBeTruthy();
  });

  it("doesn't render 'success' class when focused", function() {
    rendered.setProps({ success: true });
    rendered.setState({ focused: true });
    expect(container.className.split(" ").indexOf("success")).toBe(-1);
  });

  it("doesn't render 'error' class when focused", function() {
    rendered.setProps({ error: true });
    expect(container.className.split(" ").indexOf("error")).toBeGreaterThan(-1);
    utils.Simulate.focus(container);
    expect(container.className.split(" ").indexOf("error")).toBe(-1);
  });

  it("sets state.focused to true and executes a callback when focused", function() {
    expect(rendered.state.focused).toBe(false);
    utils.Simulate.focus(container);
    expect(rendered.state.focused).toBe(true);
    expect(callback.mock.calls.length).toBe(1);
  });

  it("sets state.focused to false executes a callback when blured", function() {
    rendered.setState({ focused: true });
    expect(rendered.state.focused).toBe(true);
    utils.Simulate.blur(container);
    expect(rendered.state.focused).toBe(false);
    expect(callback.mock.calls.length).toBe(1);
  });

  it("executes a callback when changed", function() {
    utils.Simulate.change(container);
    expect(callback.mock.calls.length).toBe(1);
  })

  it("sets maxLength prop to 2000 by default", function() {
    expect(rendered.props.maxLength).toBe(2000);
  });

  it("sets maxLength prop correctly when passed in", function() {
    rendered.setProps({ maxLength: 2});
    expect(rendered.props.maxLength).toBe(2)
  });
});