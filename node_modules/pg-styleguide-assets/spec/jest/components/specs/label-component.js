jest.autoMockOff();
require(path(pathMap.components, "label/label"));

describe("label component", function() {
  var rendered,
      clickHandler;

  beforeEach(function () {
    clickHandler = jest.genMockFunction();
    rendered = utils.renderIntoDocument(
      <PG.Components.Label />
    );
  });

  function getComponentNode(tag) {
    var el = utils.findRenderedDOMComponentWithTag(rendered, tag);
    return el.getDOMNode();
  }

  describe("default properties", function() {
    it("sets text prop to 'Label' when no value is passed in", function() {
      expect(rendered.props.text).toBe("Label");
    });

    it("sets size prop to 'large' when no value is passed in", function() {
      expect(rendered.props.size).toBe("large");
    });

    it("sets role prop to primary when no value is passed in", function() {
      expect(rendered.props.role).toBe("primary");
    });
  });

  describe("size", function() {
    it("renders a large label by default", function() {
      expect(getComponentNode("span").className).toContain("large");
    });

    it("renders a small label when size is set to small", function() {
      rendered.setProps({ size : "small" });
      expect(getComponentNode("span").className).toContain("small");
    });

    it("renders a large label when size is set to large", function() {
      rendered.setProps({ size : "large" });
      expect(getComponentNode("span").className).toContain("large");
    });

    it("defaults to large size if passed in size value in unknown", function() {
      rendered.setProps({ size: "other" });
      expect(getComponentNode("span").className).toContain("large");
    });
  });

  describe("role", function() {
    it("renders a primary label by default", function() {
      expect(getComponentNode("span").className).toContain("primary");
    });

    it("renders a primary label when role set to primary", function() {
      rendered.setProps({ role : "primary" });
      expect(getComponentNode("span").className).toContain("primary");
    });

    it("renders a secondary label when role set to secondary", function() {
      rendered.setProps({ role : "secondary" });
      expect(getComponentNode("span").className).toContain("secondary");
    });

    it("renders a additive label when role set to additive", function() {
      rendered.setProps({ role : "additive" });
      expect(getComponentNode("span").className).toContain("additive");
    });

    it("renders a destructive label when role set to destructive", function() {
      rendered.setProps({ role : "destructive" });
      expect(getComponentNode("span").className).toContain("destructive");
    });

    it("defaults to primary role if passed in role value is unknown", function() {
      rendered.setProps({ role: "other" });
      expect(getComponentNode("span").className).toContain("primary");
    });
  });

  describe("text", function() {
    it("renders default value of text property by default", function() {
      expect(getComponentNode("span").textContent).toBe("Label");
    });

    it("renders correct text when passed in", function() {
      rendered.setProps({ text: "Plangrid"});
      expect(getComponentNode("span").textContent).toBe("Plangrid");
    });
  });

});