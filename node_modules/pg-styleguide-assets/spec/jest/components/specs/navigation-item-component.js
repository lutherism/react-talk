jest.autoMockOff();
require(path(pathMap.components, "navpanel/navigation-item"));

describe("navigation item", function() {
  var rendered, clickHandler;

  beforeEach(function(){
    clickHandler = jest.genMockFunction();
    rendered = utils.renderIntoDocument(<PG.Components.NavigationItem />)
  });

  afterEach(function(){
    clickHandler.mockClear();
  });

  function getNodeByTag(tag) {
    var el = utils.findRenderedDOMComponentWithTag(rendered, tag);
    return el.getDOMNode();
  }

  function getNodeByClassName(className) {
    var el = utils.findRenderedDOMComponentWithClass(rendered, className);
    return el.getDOMNode();
  }

  it("renders the correct text", function() {
    var text = "Apples";
    rendered.setProps({text: text});
    expect(getNodeByTag("li").textContent).toBe(text);
  });

  it("renders the correct text and resource number", function() {
    rendered.setProps({ text: "Sheets", count: 2 });
    expect(getNodeByTag("li").textContent).toBe("Sheets2");
    expect(getNodeByClassName("badge-wrapper").children[0].className).toBe("badge");
  });

  it("renders an icon", function() {
    rendered.setProps({ icon: "sheet" });
    expect(getNodeByClassName("icon-sheet")).toBeTruthy();
  });

  it("renders the resource number as expected with different states", function() {
    rendered.setProps({
      text: "Sheets",
      count: 2,
      warning: true
    });
    expect(getNodeByClassName("badge-wrapper").children[0].className).toContain("warning");
  });

  it("executes the click callback", function() {
    rendered.setProps({
      text: "Sheets",
      clickHandler: clickHandler
    });

    expect(clickHandler.mock.calls.length).toBe(0);
    utils.Simulate.click(getNodeByTag("a"));
    expect(clickHandler.mock.calls.length).toBe(1);
    expect(typeof clickHandler.mock.calls[0][0]).toBe("object");
    expect(clickHandler.mock.calls[0].length).toBe(1);
  });
});