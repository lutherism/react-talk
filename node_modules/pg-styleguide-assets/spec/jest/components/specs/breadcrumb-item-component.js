jest.autoMockOff();
require(path(pathMap.components, "breadcrumb/breadcrumb-item"));

describe("breadcrumb item component", function() {
  var rendered,
      clickHandler;

  beforeEach(function() {
    clickHandler = jest.genMockFunction();
    rendered = utils.renderIntoDocument(
      <PG.Components.BreadcrumbItem />
    );
  });

  afterEach(function() {
    clickHandler.mockClear();
  });

  function getComponentNodeWithTag(tag) {
    var el = utils.findRenderedDOMComponentWithTag(rendered, tag);
    return el.getDOMNode();
  }

  describe("default properties", function() {
    it("sets url prop to # when no value was passed in", function() {
      expect(rendered.props.url).toBe("#");
    });

    it("sets text prop to Breadcrumb Item when no value was passed in", function() {
      expect(rendered.props.text).toBe("Breadcrumb Item");
    });
  });

  it("renders url", function() {
    rendered.setProps({ url: "/test"});
    expect(getComponentNodeWithTag("a").hasAttribute("href")).toBe(true);
    expect(getComponentNodeWithTag("a").getAttribute("href")).toBe("/test");
  });

  it("renders text", function() {
    rendered.setProps({ text: "Test Text"});
    expect(getComponentNodeWithTag("a").textContent).toBe("Test Text");
  });

  it("renders disabled if disabled set to true", function() {
    rendered.setProps({ disabled: true });
    expect(getComponentNodeWithTag("a").hasAttribute("disabled")).toBe(true);
  });

  it("executes callback on select", function(){
    rendered.setProps({ clickHandler: clickHandler });
    expect(clickHandler.mock.calls.length).toBe(0);
    utils.Simulate.click(getComponentNodeWithTag("a"));
    expect(clickHandler.mock.calls.length).toBe(1);
  });

  it("passes an argument to the callback", function() {
    rendered.setProps({ clickHandler: clickHandler });
    utils.Simulate.click(getComponentNodeWithTag("a"));
    expect(clickHandler.mock.calls[0][0]).not.toBeUndefined();
  });

  it("doesn't execute callback on select when disabled", function(){
    rendered.setProps({ disabled: true, clickHandler: clickHandler });
    expect(clickHandler.mock.calls.length).toBe(0);
    utils.Simulate.click(getComponentNodeWithTag("a"));
    expect(clickHandler.mock.calls.length).toBe(0);
  });
});
