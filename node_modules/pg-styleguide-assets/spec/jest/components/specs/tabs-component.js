jest.autoMockOff();
require(path(pathMap.components, "tabs/tabs"));

describe("tabs component", function() {
  var rendered,
    clickHandler;

  var items= [
    { text: "Item", badge: 24 },
    { text: "Item" },
    { text: "Item"}
  ];

  PG.Components.TabItem = genMockComponent();

  beforeEach(function () {
    clickHandler = jest.genMockFunction();
    rendered = utils.renderIntoDocument(
      <PG.Components.Tabs />
    );
  });

  afterEach(function () {
    clickHandler.mockClear();
  });

  it("renders correct number of items", function() {
    rendered.setProps({ items: items, activeIndex: 0 });
    expect(utils.scryRenderedComponentsWithType(rendered, PG.Components.TabItem).length).toBe(3);
  });

  it("passes in correct values for props", function() {
    rendered.setProps({ items: items, activeIndex: 0 });

    var children = utils.scryRenderedComponentsWithType(rendered, PG.Components.TabItem);
    expect(children[0].props.text).toBe("Item");
    expect(children[0].props.badge).toBe(24);
    expect(children[0].props.active).toBe(true);

  });
});
