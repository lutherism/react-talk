jest.autoMockOff();
require(path(pathMap.components, "breadcrumb/breadcrumb"));

describe("Breadcrumbs component", function() {
  var rendered, items;

  items = [
    {text: "1", url: "test" },
    {text: "2"},
    {text: "3"}
  ];

  PG.Components.BreadcrumbItem = genMockComponent();

  beforeEach(function() {
    rendered = utils.renderIntoDocument(
      <PG.Components.Breadcrumb />
    );
  });

  it("renders the correct number of child components", function() {
    rendered.setProps({ items: items });
    var children = utils.scryRenderedComponentsWithType(rendered, PG.Components.BreadcrumbItem);
    expect(children.length).toBe(3);
  });

  describe("child components", function() {
    it("passes correct value for url property in", function() {
      rendered.setProps({ items: items });
      var children = utils.scryRenderedComponentsWithType(rendered, PG.Components.BreadcrumbItem);
      expect(children[0].props.url).toBe("test");
    });

    it("passes correct value for text property in", function() {
      rendered.setProps({ items: items });
      var children = utils.scryRenderedComponentsWithType(rendered, PG.Components.BreadcrumbItem);
      expect(children[0].props.text).toBe("1");
    });

    it("passes disabled set to true for the last breadcrumb item", function() {
      rendered.setProps({ items: items });
      var children = utils.scryRenderedComponentsWithType(rendered, PG.Components.BreadcrumbItem);
      expect(children[1].props.disabled).toBe(false);
      expect(children[2].props.disabled).toBe(true);
    });
  });
});
