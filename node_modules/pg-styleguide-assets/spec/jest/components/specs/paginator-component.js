jest.autoMockOff();
require(path(pathMap.components, "paginator/paginator"));


describe("paginator component", function() {
  var rendered,
      clickHandler;

  PG.Components.PaginatorItem = genMockComponent();

  beforeEach(function () {
    clickHandler = jest.genMockFunction();
    rendered = utils.renderIntoDocument(
      <PG.Components.Paginator currentPageIndex={0} />
    );
  });

  afterEach(function() {
    clickHandler.mockClear();
  });

  function getComponentNode() {
    var el = utils.findRenderedDOMComponentWithTag(rendered, "ul");
    return el.getDOMNode();
  }

  function getChildNodes() {
    return utils.scryRenderedComponentsWithType(rendered,PG.Components.PaginatorItem);
  }

  function getPageNode(index) {
    return utils.scryRenderedComponentsWithType(rendered,PG.Components.PaginatorItem)[index];
  }

  it("renders regular pagination by default", function() {
    expect(getComponentNode()).toBeTruthy();
    expect(getComponentNode().className).toContain("pagination");
    expect(getComponentNode().className).not.toContain("pills");
  });

  it("renders prev/next pills if type set to prev-next", function() {
    rendered.setProps({ type: "prev-next" });
    expect(getComponentNode().className).toContain("pagination");
    expect(getComponentNode().className).toContain("pills");
  });

  it("sets initial value of state.currentPageIndex from currentPageIndex property", function() {
    expect(rendered.state).not.toBeUndefined();
    expect(rendered.state.currentPageIndex).toBe(0);
  });

  it("updates value of state.currentPageIndex when text property is passed in", function() {
    expect(rendered.state).not.toBeUndefined();
    expect(rendered.state.currentPageIndex).toBe(0);
    rendered.setProps({ currentPageIndex: 1 });
    expect(rendered.state.currentPageIndex).toBe(1);
  });

  it("disables prev item when current page if the first one", function() {
    rendered.setProps({ currentPageIndex: 0, numberOfPages: 3 });
    expect(getPageNode(0).props.disabled).toBe(true);
  });

  it("disables next item when current page is the last one", function() {
    rendered.setProps({ currentPageIndex: 2, numberOfPages: 3 });
    expect(getPageNode(4).props.disabled).toBe(true);
  });

  it("executes callback when clicked on a page number", function() {
    rendered.setProps({ currentPageIndex: 0, numberOfPages: 2, clickHandler: clickHandler });
    var page = getPageNode(2);

    expect(clickHandler.mock.calls.length).toBe(0);
    page.props.clickHandler(page.props.pageIndex);
    expect(clickHandler.mock.calls.length).toBe(1);
  });

  it("executes callback when clicked on prev", function() {
    rendered.setProps({ currentPageIndex: 1, numberOfPages: 2, clickHandler: clickHandler });
    var prev = getPageNode(0);

    expect(clickHandler.mock.calls.length).toBe(0);
    prev.props.clickHandler(prev.props.pageIndex);
    expect(clickHandler.mock.calls.length).toBe(1);
  });

  it("executes callback when clicked on next", function() {
    rendered.setProps({ currentPageIndex: 0, numberOfPages: 2, clickHandler: clickHandler });
    var next = getPageNode(3);

    expect(clickHandler.mock.calls.length).toBe(0);
    next.props.clickHandler(next.props.pageIndex);
    expect(clickHandler.mock.calls.length).toBe(1);
  });

  it("passes page index value to pageIndex prop for page items", function() {
    rendered.setProps({ numberOfPages : 2 });
    expect(getPageNode(1).props.pageIndex).toBe(0);
  });

  it("passes '-' value to pageIndex prop for prev page item", function() {
    rendered.setProps({ numberOfPages : 2 });
    expect(getPageNode(0).props.pageIndex).toBe("-");
  });

  it("passes '+' value to pageIndex prop for next page item", function() {
    rendered.setProps({ numberOfPages : 2 });
    expect(getPageNode(3).props.pageIndex).toBe("+");
  });

  describe("child components", function() {
    it("renders correct number of items for default paginator", function() {
      rendered.setProps({ numberOfPages: 3 });
      expect(getChildNodes().length).toBe(5); // 3 page + prev and next
    });

    it("renders correct number of items for prev-next paginator", function() {
      rendered.setProps({ type: "prev-next", numberOfPages: 3 });
      expect(getChildNodes().length).toBe(2); // only prev and next
    });

    it("passes correct type value", function() {
      rendered.setProps({ numberOfPages: 1 });
      expect(getPageNode(0).props.type).toBe("prev");
      expect(getPageNode(1).props.type).toBe("page");
      expect(getPageNode(2).props.type).toBe("next");
    });

    it("passes correct current value", function() {
      rendered.setProps({ numberOfPages: 1, currentPageIndex: 0 });
      expect(getPageNode(1).props.current).toBe(true);
    });

    it("passes correct text value for page item", function() {
      rendered.setProps({ numberOfPages: 1, currentPageIndex: 0 });
      expect(getPageNode(1).props.text).toBe('1');
    });

    it("passes correct text value for prev item", function() {
      rendered.setProps({ prevText: "Prev", type: "prev-next" });
      expect(getPageNode(0).props.text).toBe("Prev");
    });

    it("passes correct text value for next item", function() {
      rendered.setProps({ nextText: "Next", type: "prev-next" });
      expect(getPageNode(1).props.text).toBe("Next");
    });
  });
})
