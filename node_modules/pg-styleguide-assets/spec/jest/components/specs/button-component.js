jest.autoMockOff();
require(path(pathMap.components, "button/button"));

describe("button component", function() {
  var rendered,
      clickHandler;

  beforeEach(function() {
    clickHandler = jest.genMockFunction();
    rendered = utils.renderIntoDocument(
      <PG.Components.Button />
    );
  });

  afterEach(function() {
    clickHandler.mockClear();
  });

  function getComponentNode() {
    var el = utils.findRenderedDOMComponentWithTag(rendered, "button");
    return el.getDOMNode();
  }

  describe("default properties", function() {
    it("sets text prop to Button when no value was passed in", function() {
      expect(rendered.props.text).toBe("Button");
    });

    it("sets size prop to medium when no value was passed in", function() {
      expect(rendered.props.size).toBe("medium");
    });

    it("sets role prop to primary when no value was passed in", function() {
      expect(rendered.props.role).toBe("primary");
    });

    it("sets type prop to button when no value was passed in", function() {
      expect(rendered.props.type).toBe("button");
    });
  });

  describe("size", function() {
    it("renders a medium button by default", function() {
      expect(getComponentNode().className).toContain("medium");
    });

    it("renders an x-small button when size set to x-small", function() {
      rendered.setProps({ size : "x-small" });
      expect(getComponentNode().className).toContain("x-small");
    });

    it("renders a small button when size set to small", function() {
      rendered.setProps({ size : "small" });
      expect(getComponentNode().className).toContain("small");
    });

    it("renders a medium button when size set to medium", function() {
      rendered.setProps({ size : "medium" });
      expect(getComponentNode().className).toContain("medium");
    });

    it("renders a large button when size set to large", function() {
      rendered.setProps({ size : "large" });
      expect(getComponentNode().className).toContain("large");
    });

    it("defaults to medium when unknown size value passed in", function(){
      rendered.setProps({ size: "other" });
      expect(getComponentNode().className).toContain("medium");
    });

  });

  describe("role", function() {
    it("renders a primary button by default", function() {
      expect(getComponentNode().className).toContain("primary");
    });

    it("renders a primary button when role set to primary", function() {
      rendered.setProps({ role : "primary" });
      expect(getComponentNode().className).toContain("primary");
    });

    it("renders a secondary button when role set to secondary", function() {
      rendered.setProps({ role : "secondary" });
      expect(getComponentNode().className).toContain("secondary");
    });

    it("renders a additive button when role set to additive", function() {
      rendered.setProps({ role : "additive" });
      expect(getComponentNode().className).toContain("additive");
    });

    it("renders a destructive button when role set to destructive", function() {
      rendered.setProps({ role : "destructive" });
      expect(getComponentNode().className).toContain("destructive");
    });

    it("defaults to primary when unknown role value passed in", function(){
      rendered.setProps({ role: "other" });
      expect(getComponentNode().className).toContain("primary");
    });
  });

  it("has type button", function() {
    expect(getComponentNode().getAttribute("type")).toBe("button");
  });

  it("renders default value of text property by default", function() {
    expect(getComponentNode().textContent).toBe("Button");
  });

  it("renders correct text when passed in", function() {
    rendered.setProps({ text: "Button Text"});
    expect(getComponentNode().textContent).toBe("Button Text");
  });

  it("renders a full-width button when full-width is set to true", function() {
    rendered.setProps({ fullWidth : true });
    expect(getComponentNode().className).toContain("full-width");
  });

  it("rendered button has a type attribute from the type prop", function() {
    rendered.setProps({type: "test"});
    expect(getComponentNode().type).toContain("test");
  });

  it("renders a disabled button when disabled is set to true", function() {
    expect(getComponentNode().hasAttribute("disabled")).toBe(false);
    rendered.setProps({ disabled: true });
    expect(getComponentNode().hasAttribute("disabled")).toBe(true);
  });

  it("executes callback on click", function() {
    rendered.setProps({ clickHandler: clickHandler });
    expect(clickHandler.mock.calls.length).toBe(0);
    utils.Simulate.click(getComponentNode());
    expect(clickHandler.mock.calls.length).toBe(1);
  });

  it("doesn't execute a callback when clicked if disabled", function() {
    rendered.setProps({ disabled: true, clickHandler: clickHandler });
    expect(clickHandler.mock.calls.length).toBe(0);
    utils.Simulate.click(getComponentNode());
    expect(clickHandler.mock.calls.length).toBe(0);
  });

  it("passes an argument to the callback", function() {
    rendered.setProps({ clickHandler: clickHandler });
    utils.Simulate.click(getComponentNode());
    expect(clickHandler.mock.calls[0][0]).not.toBeUndefined();
  });

});
