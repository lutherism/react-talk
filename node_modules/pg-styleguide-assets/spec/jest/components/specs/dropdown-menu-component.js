jest.autoMockOff();
require(path(pathMap.components, "dropdown/menu"));

describe("dropdown menu component", function() {
  var rendered;

  PG.Components.DropdownMenuItem = genMockComponent();

  beforeEach(function() {
    rendered = utils.renderIntoDocument(
      <PG.Components.DropdownMenu />
    );
  });

  function getComponentNode() {
    var el = utils.findRenderedDOMComponentWithClass(rendered, "dropdown-menu");
    return el.getDOMNode();
  }

  describe("default properties", function() {
    it("sets items to an empty array if no value was passed in", function() {
      expect(rendered.props.items).toEqual([]);
    });

    it("sets open to false if no value was passed in", function() {
      expect(rendered.props.open).toBe(false);
    });

    it("sets transparent to false if no value was passed in", function() {
      expect(rendered.props.transparent).toBe(false);
    });

    it("sets textCentered to false if no value was passed in", function() {
      expect(rendered.props.textCentered).toBe(false);
    });

    it("sets updateText to false if no value was passed in", function() {
      expect(rendered.props.textCentered).toBe(false);
    });
  });

  it("renders closed by default", function() {
    expect(getComponentNode().className).not.toContain("open");
  });

  it("renders open when open set to true", function() {
    rendered.setProps({ open: true });
    expect(getComponentNode().className).toContain("open");
  });

  it("renders transparent menu when transparent set to true", function() {
    rendered.setProps({ transparent: true });
    expect(getComponentNode().className).toContain("transparent");
  });

  it("renders with text centered when textCentered set to true", function() {
    rendered.setProps({ textCentered: true });
    expect(getComponentNode().className).toContain("text-centered");
  });

  it("renders with bold text when bold set to true", function() {
    rendered.setProps({ bold: true });
    expect(getComponentNode().className).toContain("bold");
  });

  describe("child components", function() {
    beforeEach(function(){
      rendered.setProps(
        {
          items:
            [ { value : "key1", text: "value1", type: "title" },
              { value : "key2", text: "value2", type: "divider" },
              { value : "key3", text: "value3", type: "item" }
            ]
        }
      );
    });

    it("renders correct number of items", function() {
      var items = utils.scryRenderedComponentsWithType(rendered,PG.Components.DropdownMenuItem);
      expect(items.length).toBe(3);
    });

    it("passes correct value for value prop", function() {
      var items = utils.scryRenderedComponentsWithType(rendered,PG.Components.DropdownMenuItem);
      expect(items[0].props["value"]).toBeDefined();
      expect(items[0].props["value"]).toBe("key1");
    });

    it("passes correct value for text prop", function() {
      var items = utils.scryRenderedComponentsWithType(rendered,PG.Components.DropdownMenuItem);
      expect(items[0].props["text"]).toBeDefined();
      expect(items[0].props["text"]).toBe("value1");
    });

    it("passes correct value for type prop", function() {
      var items = utils.scryRenderedComponentsWithType(rendered,PG.Components.DropdownMenuItem);
      expect(items[0].props["type"]).toBeDefined();
      expect(items[0].props["type"]).toBe("title");
    });
  });

});