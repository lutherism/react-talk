jest.autoMockOff();
require(path(pathMap.components, "dropdown/dropdown"));

describe("dropdown component", function() {
  var rendered,
      selectHandler,
      menu, button,
      input = document.createElement("input"),
      items = [
        { value : "key1", text: "value1", type: "title" },
        { value : "key2", text: "value2", type: "divider" },
        { value : "key3", text: "value3", type: "item" }
      ];

  input.value = "test";
  input.setAttribute("data-text", "Test");

  PG.Components.Button = genMockComponent();
  PG.Components.DropdownMenu = genMockComponent();

  beforeEach(function() {
    selectHandler = jest.genMockFunction();
    rendered = utils.renderIntoDocument(
      <PG.Components.Dropdown />
    );

    button = utils.findRenderedComponentWithType(rendered, PG.Components.Button);
    menu = utils.findRenderedComponentWithType(rendered, PG.Components.DropdownMenu);
  });

  afterEach(function() {
    selectHandler.mockClear();
  });

  describe("default properties", function() {
    it("it sets items prop to an empty array if no value was passed in", function() {
      expect(rendered.props.items).toEqual([]);
    });

    it("sets size prop to medium if no value was passed in", function() {
      expect(rendered.props.size).toBe("medium");
    });

    it("sets role prop to primary if no value was passed in", function() {
      expect(rendered.props.role).toBe("primary");
    });

    it("sets text prop to Menu Item if no value was passed in", function() {
      expect(rendered.props.text).toBe("Menu Item");
    });
  });

  it("renders with closed menu by default", function() {
    expect(menu.props.open).not.toBe(true);
  });

  it("renders with open menu if open set to true", function() {
    rendered.setState({ open: true });
    expect(menu.props.open).toBe(true);
  });

  it("toggles menu state when clicked", function() {
    rendered.setState({ open: true });
    expect(menu.props.open).toBe(true);
    button.props.clickHandler();
    expect(rendered.state.open).toBe(false);
  });

  it("collapses the menu options when an option was selected", function() {
    rendered.setState({ open: true });
    expect(menu.props.open).toBe(true);
    menu.props.selectHandler({ target: input });
    expect(menu.props.open).toBe(false);
  });

  it("executes callback when an option selected", function() {
    rendered.setProps({ selectHandler: selectHandler });
    expect(selectHandler.mock.calls.length).toBe(0);
    menu.props.selectHandler({ target: input });
    expect(selectHandler.mock.calls.length).toBe(1);
  });

  it("passes selected option text and value to callback", function() {
    rendered.setProps({ selectHandler: selectHandler });
    expect(selectHandler.mock.calls.length).toBe(0);
    menu.props.selectHandler({ target: input });
    expect(selectHandler.mock.calls.length).toBe(1)
    expect(selectHandler.mock.calls[0][0]).toEqual({ value: "test", text: "Test" });
  });

  it("updates dropdown text when an option selected if updateText prop set to true", function() {
    rendered.setProps({ selectHandler: selectHandler, updateText: true });
    menu.props.selectHandler({ target: input });
    expect(rendered.state.text).toBe("Test");
  });

  it("doesn't update dropdown text when an option selected if updateText prop not set to true", function() {
    rendered.setProps({ selectHandler: selectHandler });
    menu.props.selectHandler({ target: input });
    expect(rendered.state.text).toBe("Menu Item");
  });

  it("updates value of state.text when text property is passed in", function() {
    expect(rendered.state).not.toBeUndefined();
    expect(rendered.state.text).toBe("Menu Item");
    rendered.setProps({ text: "New Text" });
    expect(rendered.state.text).toBe("New Text");
  });

  describe("child components", function() {
    it("renders button component", function() {
      expect(button).toBeTruthy();
    });

    it("renders dropdown menu component", function() {
      expect(menu).toBeTruthy();
    });

    it("passes correct value for text prop", function() {
      rendered.setProps({ text: "Sort By"});
      expect(button.props.text).toBeDefined();
      expect(button.props.text).toBe("Sort By");
    });

    it("passes correct value for open prop", function() {
      rendered.setState({ open: true });
      expect(menu.props.open).toBeDefined();
      expect(menu.props.open).toBe(true);
    });

    it("passes correct value for disable prop", function() {
      rendered.setProps({ disabled: true });
      expect(button.props.disabled).toBeDefined();
      expect(button.props.disabled).toBe(true);
    });

    it("passes correct value for role prop", function() {
      rendered.setProps({ role: "primary" });
      expect(button.props.role).toBeDefined();
      expect(button.props.role).toBe("primary");
    });

    it("passes correct value for size prop", function() {
      rendered.setProps({ size: "large" });
      expect(button.props.size).toBeDefined();
      expect(button.props.size).toBe("large");
    });

    it("passes correct values for items array", function() {
      rendered.setProps({ items: items});
      expect(menu.props.items).toBeDefined();
      expect(menu.props.items.length).toBe(3);
      expect(menu.props.items[0].value).toBe("key1");
    });
   });
});
