jest.autoMockOff();
require(path(pathMap.components, "dropdown/menu-item"));

describe("menu item component", function() {
  var rendered,
      clickHandler;

  beforeEach(function() {
    clickHandler = jest.genMockFunction();
    rendered = utils.renderIntoDocument(
      <PG.Components.DropdownMenuItem />
    );
  });

  afterEach(function() {
    clickHandler.mockClear();
  });

  function getComponentNodeWithTag(tag) {
    var el = utils.findRenderedDOMComponentWithTag(rendered, tag);
    return el.getDOMNode();
  }

  describe("default properties", function() {
    it("sets type prop to item when no value was passed in", function() {
      expect(rendered.props.type).toBe("item");
    });

    it("sets text prop to Menu Item when no value was passed in", function() {
      expect(rendered.props.text).toBe("Menu Item");
    });
  });

  it("renders like an item by default", function() {
    expect(getComponentNodeWithTag("li").className).toContain("item");
    expect(getComponentNodeWithTag("li").className).not.toContain("title");
    expect(getComponentNodeWithTag("li").className).not.toContain("divider");
  });

  it("renders like a title when type set to title", function() {
    rendered.setProps({ type: "title" });
    expect(getComponentNodeWithTag("li").className).toContain("title");
    expect(getComponentNodeWithTag("li").className).not.toContain("item");
    expect(getComponentNodeWithTag("li").className).not.toContain("divider");
  });

  it("renders like a divider when type set to divider", function() {
    rendered.setProps({ type: "divider" });
    expect(getComponentNodeWithTag("li").className).toContain("divider");
    expect(getComponentNodeWithTag("li").className).not.toContain("item");
    expect(getComponentNodeWithTag("li").className).not.toContain("title");
  });

  it("renders like an item when type set to item", function() {
    rendered.setProps({ type: "item" });
    expect(getComponentNodeWithTag("li").className).toContain("item");
    expect(getComponentNodeWithTag("li").className).not.toContain("divider");
    expect(getComponentNodeWithTag("li").className).not.toContain("title");
  });

  it("renders key", function() {
    rendered.setProps({ value: "test"});
    expect(getComponentNodeWithTag("input").hasAttribute("value")).toBe(true);
    expect(getComponentNodeWithTag("input").getAttribute("value")).toBe("test");
  });

  it("renders value", function() {
    rendered.setProps({ text: "Test Text"});
    expect(getComponentNodeWithTag("label").textContent).toBe("Test Text");
  });

  it("executes callback on select", function(){
    rendered.setProps({ selectHandler: clickHandler });
    expect(clickHandler.mock.calls.length).toBe(0);
    utils.Simulate.click(getComponentNodeWithTag("input"));
    expect(clickHandler.mock.calls.length).toBe(1);
  });

  it("passes an argument to the callback", function() {
    rendered.setProps({ selectHandler: clickHandler });
    utils.Simulate.click(getComponentNodeWithTag("input"));
    expect(clickHandler.mock.calls[0][0]).not.toBeUndefined();
  });
});
