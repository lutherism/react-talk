jest.autoMockOff();
require(path(pathMap.components, "paginator/paginator-item"));

describe("paginator item component", function() {
  var rendered,
    clickHandler;

  beforeEach(function() {
    clickHandler = jest.genMockFunction();
    rendered = utils.renderIntoDocument(
      <PG.Components.PaginatorItem />
    );
  });

  afterEach(function() {
    clickHandler.mockClear();
  });

  function getComponentNode() {
    var el = utils.findRenderedDOMComponentWithTag(rendered, "li");
    return el.getDOMNode();
  }

  describe("default properties", function() {
    it("sets type prop to page when no value was passed in", function() {
      expect(rendered.props.type).toBe("page");
    });
  });

  it("renders like a regular page item by default", function() {
    expect(getComponentNode()).toBeTruthy();
    expect(getComponentNode().className).toContain("page");
    expect(getComponentNode().className).not.toContain("prev");
    expect(getComponentNode().className).not.toContain("next");
  });

  it("renders like a regular page item if type set to page", function() {
    rendered.setProps({ type: "page" });
    expect(getComponentNode().className).toContain("page");
    expect(getComponentNode().className).not.toContain("prev");
    expect(getComponentNode().className).not.toContain("next");
  });

  it("renders like a previous page item if type set to prev", function() {
    rendered.setProps({ type: "prev" });
    expect(getComponentNode().className).toContain("prev");
    expect(getComponentNode().className).not.toContain("page");
    expect(getComponentNode().className).not.toContain("next");
  });

  it("renders like a next page item if type set to next", function() {
    rendered.setProps({ type: "next" });
    expect(getComponentNode().className).toContain("next");
    expect(getComponentNode().className).not.toContain("page");
    expect(getComponentNode().className).not.toContain("prev");
  });

  it("renders like a current page item if current set to true", function() {
    rendered.setProps({ current: true });
    expect(getComponentNode().className).toContain("current");
  });

  it("renders correct text", function() {
    rendered.setProps({ text: "Test" });
    expect(getComponentNode().textContent).toBe("Test");
  });

  it("appears disabled if disabled set to true", function() {
    expect(getComponentNode().hasAttribute("disabled")).toBe(false);
    rendered.setProps({ disabled: true });
    expect(getComponentNode().hasAttribute("disabled")).toBe(true);
  });

  it("executes callback on click", function() {
    rendered.setProps({ clickHandler: clickHandler });
    expect(clickHandler.mock.calls.length).toBe(0);
    utils.Simulate.click(getComponentNode());
    expect(clickHandler.mock.calls.length).toBe(1);
  });

  it("doesn't execute callback if disabled set to true", function() {
    rendered.setProps({ disabled: true });
    expect(clickHandler.mock.calls.length).toBe(0);
    utils.Simulate.click(getComponentNode());
    expect(clickHandler.mock.calls.length).toBe(0);
  });

  it("passes page index to the callback", function() {
    rendered.setProps({ clickHandler: clickHandler, pageIndex: 1 });
    utils.Simulate.click(getComponentNode());
    expect(clickHandler.mock.calls[0][0]).toBe(1);
  });
});
