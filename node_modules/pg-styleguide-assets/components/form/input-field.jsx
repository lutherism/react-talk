PG.Components.InputField = React.createClass({
  propTypes: {
    type: React.PropTypes.string,
    placeholder: React.PropTypes.string,
    value: React.PropTypes.string,
    inline: React.PropTypes.bool,
    error: React.PropTypes.bool,
    success: React.PropTypes.bool,
    disabled: React.PropTypes.bool,
    changeHandler: React.PropTypes.func,
    focusHandler: React.PropTypes.func,
    blurHandler: React.PropTypes.func,
    maxLength: React.PropTypes.number
  },

  getDefaultProps: function getDefaultProps() {
    return {
      maxLength: 2000
    };
  },

  getInitialState: function getInitialState() {
    return {
      focused: false
    };
  },

  render: function render() {
    var classes = React.addons.classSet({
      "inline": this.props.inline,
      "error": !this.state.focused && this.props.error,
      "success": !this.state.focused && this.props.success
    });

    return (
      <input type={this.props.type}
        placeholder={this.props.placeholder}
        value={this.props.value}
        className={classes}
        onChange={this.props.changeHandler}
        onFocus={this.handleFocus}
        onBlur={this.handleBlur}
        maxLength={this.props.maxLength}
        disabled={this.props.disabled}
      />
    );
  },

  handleFocus: function handleFocus() {
    this.setState({focused: true});

    if(this.props.focusHandler)
      this.props.focusHandler();
  },

  handleBlur: function handleBlur() {
    this.setState({focused: false});

    if(this.props.blurHandler)
      this.props.blurHandler();
  }
});

if (typeof module !== "undefined") module.exports = PG.Components.InputField;