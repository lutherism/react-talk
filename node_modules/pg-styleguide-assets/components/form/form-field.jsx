PG.Components.FormField = React.createClass({
  propTypes: {
    label: React.PropTypes.string,
    anchorText: React.PropTypes.string,
    anchorHref: React.PropTypes.string,
    errorMessage: React.PropTypes.string,
    inlineLabel: React.PropTypes.bool
  },

  getInitialState: function getInitialState() {
    return {
      focused: false
    };
  },

  render: function render() {
    var fieldClasses = React.addons.classSet({
        "form-field": true,
        "inline-label": this.props.inlineLabel,
        "error": this.props.errorMessage && !this.state.focused
      }),
      labelClasses = React.addons.classSet({
        "success": this.filledIn() && !this.props.errorMessage,
        "error": !!this.props.errorMessage
      });

    return (
      <div className={fieldClasses}>
        <label className={labelClasses}>{this.props.label}</label>
        {this.getInputFields()}
        {this.renderAnchor()}
        {this.renderErrorMsg()}
      </div>
    );
  },

  getInputFields: function getInputFields() {
    if (!this.props.children) return;

    var inline = this.props.children.length > 1;

    return React.Children.map(this.props.children, function (child) {
      if (child.type === PG.Components.InputField.type) {
        return React.addons.cloneWithProps(child, {
          inline: inline,
          focusHandler: this.handleInputFocus.bind(this, child),
          blurHandler: this.handleInputBlur.bind(this, child)
        });
      }
    }.bind(this));
  },

  renderAnchor: function renderAnchor() {
    if (!this.props.anchorText) return;

    return (
      <a href={this.props.anchorHref} className="form-field-link">
      {this.props.anchorText}
      </a>
    );
  },

  renderErrorMsg: function renderErrorMsg() {
    if (!this.state.focused && this.props.errorMessage) {
      return (
        <span className="field-error-message">{this.props.errorMessage}</span>
      );
    }
  },

  handleInputFocus: function handleInputFocus(input) {
    this.setState({ focused: true });
    if (input.props.focusHandler)
      input.props.focusHandler();
  },

  handleInputBlur: function handleInputBlur(input) {
    this.setState({ focused: false });
    if (input.props.blurHandler)
      input.props.blurHandler();
  },

  filledIn: function filledIn() {
    var hasValue = true;
    React.Children.forEach(this.props.children, function(child) {
      if (!child.props.value) hasValue = false;
    });
    return hasValue;
  }
});

if (typeof module !== "undefined") module.exports = PG.Components.FormField;