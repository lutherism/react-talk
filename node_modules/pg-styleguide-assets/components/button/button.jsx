PG.Components.Button = React.createClass({
  allowedSizes: [ "x-small", "small", "medium", "large"],
  allowedRoles: [ "primary", "secondary", "additive", "destructive" ],

  propTypes:  {
    size:           React.PropTypes.string,
    role:           React.PropTypes.string,
    text:           React.PropTypes.string,
    disabled:       React.PropTypes.bool,
    fullWidth:      React.PropTypes.bool,
    showChevron:    React.PropTypes.bool,
    clickHandler:   React.PropTypes.func
  },

  getDefaultProps: function getDefaultProps() {
    return {
      size: "medium",
      role: "primary",
      text: "Button",
      type: "button"
    };
  },

  handleClick: function handleClick(e) {
    e.preventDefault();
    e.stopPropagation();

    if (this.props.clickHandler && !this.props.disabled)
      this.props.clickHandler(e);
  },

  render: function render() {
    var classSet = this.getClassSet(),
      classes = React.addons.classSet(classSet);

    return (
      <button type={this.props.type} disabled={this.props.disabled} className={classes} onClick={this.handleClick}>
        {this.props.text}
        {this.getChevron()}
        <span className="button-overlay"></span>
      </button>
    );
  },

  getClassSet: function getClassSet() {
    var classSet = {
      "button" : true,
      "full-width" : this.props.fullWidth,
      "medium" : this.allowedSizes.indexOf(this.props.size) === -1,
      "primary" : this.allowedRoles.indexOf(this.props.role) === -1
    };

    classSet[this.props.size] = this.allowedSizes.indexOf(this.props.size) > -1;
    classSet[this.props.role] = this.allowedRoles.indexOf(this.props.role) > -1;

    return classSet;
  },

  getChevron: function getChevron() {
    if (!this.props.showChevron) return;

    return (
      <span className="chevron-down"></span>
    );
  }
});

if(typeof module !== "undefined") module.exports = PG.Components.Button;
