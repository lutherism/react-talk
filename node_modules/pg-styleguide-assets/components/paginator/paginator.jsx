PG.Components.Paginator = React.createClass({
  propTypes:  {
    currentPageIndex:   React.PropTypes.number,
    numberOfPages:      React.PropTypes.number,
    prevText:           React.PropTypes.string,
    nextText:           React.PropTypes.string,
    clickHandler:       React.PropTypes.func
  },

  getDefaultProps: function getDefaultProps() {
    return {
      currentPageIndex: 0,
      prevText: "Previous",
      nextText: "pNext`"
    };
  },

  getInitialState: function getInitialState() {
    return {
      currentPageIndex: this.props.currentPageIndex
    };
  },

  componentWillReceiveProps: function componentWillReceiveProps(nextProps) {
    if (nextProps.currentPageIndex)
      this.setState({ currentPageIndex: nextProps.currentPageIndex });
  },

  handleClick: function handleClick(index) {
    var newIndex = this.getNewIndex(index);

    this.setState({
      currentPageIndex: newIndex
    });

    if (this.props.clickHandler)
      this.props.clickHandler(index);
  },

  getNewIndex: function getNewIndex(index) {
    if (index === "-")
      return this.state.currentPageIndex - 1;
    else if (index === "+")
      return this.state.currentPageIndex + 1;
    else
      return parseInt(index, 10);
  },

  render: function render() {
    var items = [], classes;

    classes = React.addons.classSet({
      "pagination"  : true,
      "pills"       : this.props.type === "prev-next"
    });

    items.push(
      <PG.Components.PaginatorItem
        key={0}
        type="prev"
        pageIndex="-"
        text={this.props.prevText}
        disabled={this.state.currentPageIndex === 0}
        clickHandler={this.handleClick}
      />
    );

    if (this.props.type !== "prev-next") {
      for (var i = 0; i < this.props.numberOfPages; i++) {
        items.push(
          <PG.Components.PaginatorItem
            key={i+1}
            type="page"
            pageIndex={i}
            text={(i+1).toString()}
            current={this.state.currentPageIndex === i}
            clickHandler={this.handleClick}
          />
        );
      }
    }

    items.push(
      <PG.Components.PaginatorItem
        key={this.props.numberOfPages+1}
        type="next"
        pageIndex="+"
        text={this.props.nextText}
        disabled={this.state.currentPageIndex === this.props.numberOfPages - 1}
        clickHandler={this.handleClick}
      />
    );

    return (
      <ul className={classes}>
      {items}
      </ul>
    );
  }
});

if(typeof module !== "undefined") module.exports = PG.Components.Paginator;
